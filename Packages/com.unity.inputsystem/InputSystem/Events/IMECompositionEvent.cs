using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine.InputSystem.Utilities;

namespace UnityEngine.InputSystem.LowLevel
{
    /// <summary>
    /// A specialized event that contains the current IME Composition string, if IME is enabled and active.
    /// This event contains the entire current string to date, and once a new composition is submitted will send a blank string event.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = InputEvent.kBaseEventSize + sizeof(int) + (sizeof(char)))]
    public struct IMECompositionEvent : IInputEventTypeInfo
    {
        public const int Type = 0x494D4543;

        [FieldOffset(0)]
        public InputEvent baseEvent;

        [FieldOffset(InputEvent.kBaseEventSize)]
        public int length;

        [FieldOffset(InputEvent.kBaseEventSize + sizeof(int))]
        public char bufferStart;

        public FourCC typeStatic => Type;

        /// <summary>
        /// Gets an IME Composition String.  !-- This Composition String can only be used within the <see cref="ITextInputReceiver.OnIMECompositionChanged" it was recieved on./>
        /// </summary>
        /// <returns>A structure containing the current IME Composition</returns>
        public IMECompositionString GetComposition()
        {
            unsafe
            {
                fixed(char* buffer = &bufferStart)
                {
                    return new IMECompositionString(new IntPtr(buffer), length);
                }
            }
        }

        /// <summary>
        /// Queues up an IME Composition Event.!-- This event is for unit testing and debug purposes, and is slow, due to the variable way that IME Composition events work.
        /// </summary>
        /// <param name="deviceId">The Id you'd like to send the composition event at.</param>
        /// <param name="str">The IME composition string.</param>
        /// <param name="time">The time that the event occurred at.</param>
        public static void QueueEvent(int deviceId, string str, double time)
        {
            unsafe
            {
                int sizeInBytes = (InputEvent.kBaseEventSize + sizeof(int) + sizeof(char)) + (sizeof(char) * str.Length);
                IntPtr evtPtr = Marshal.AllocHGlobal(sizeInBytes);
                byte* ptr = (byte*)evtPtr.ToPointer();
                InputEvent* evt = (InputEvent*)ptr;

                *evt = new InputEvent(Type, sizeInBytes, deviceId, time);
                ptr += InputEvent.kBaseEventSize;

                int* lengthPtr = (int*)ptr;
                *lengthPtr = str.Length;

                ptr += sizeof(int);

                fixed(char* p = str)
                {
                    Buffer.MemoryCopy(p, ptr, str.Length * sizeof(char), str.Length * sizeof(char));
                }

                InputSystem.QueueEvent(new InputEventPtr(evt));
                Marshal.FreeHGlobal(evtPtr);
            }
        }
    }

    /// <summary>
    /// A struct representing an string of characters generated by an IME for text input.
    /// </summary>
    /// <remarks>
    /// This is the internal representation of character strings in the event stream. It is exposed to user content through the
    /// <see cref="ITextInputReceiver.OnIMECompositionChanged"/> method. It can easily be converted to a normal C# string using
    ///  <see cref="ToString"/>, but is exposed as the raw struct to avoid allocating memory by default.
    /// </remarks>
    public unsafe struct IMECompositionString : IEnumerable<char>
    {
        internal struct Enumerator : IEnumerator<char>
        {
            IntPtr m_BufferStart;
            int m_CharacterCount;
            char m_CurrentCharacter;
            int m_CurrentIndex;

            public Enumerator(IMECompositionString compositionString)
            {
                m_BufferStart = compositionString.m_CharBuffer;
                m_CharacterCount = compositionString.length;
                m_CurrentCharacter = '\0';
                m_CurrentIndex = -1;
            }

            public bool MoveNext()
            {
                m_CurrentIndex++;

                if (m_CurrentIndex == m_CharacterCount)
                    return false;

                char* ptr = (char*)m_BufferStart.ToPointer();
                m_CurrentCharacter = *(ptr + m_CurrentIndex);

                return true;
            }

            public void Reset()
            {
                m_CurrentIndex = -1;
            }

            public void Dispose()
            {
            }

            public char Current => m_CurrentCharacter;

            object IEnumerator.Current => Current;
        }

        int m_Length;
        public int length { get { return m_Length; }}

        IntPtr m_CharBuffer;

        public char this[int index]
        {
            get
            {
                if (index >= m_Length || index < 0)
                    throw new ArgumentOutOfRangeException(nameof(index));

                char* ptr = (char*)m_CharBuffer.ToPointer();
                return *(ptr + index);
            }
        }


        public IMECompositionString(IntPtr charBuffer, int length)
        {
            m_Length = length;
            m_CharBuffer = charBuffer;
        }

        //static StringBuilder sb;

        public override string ToString()
        {
            char* ptr = (char*)m_CharBuffer.ToPointer();
            return new string(ptr, 0, m_Length);
        }

        public IEnumerator<char> GetEnumerator()
        {
            return new Enumerator(this);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
