//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from Pointer Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct PointerEvent : IInputData
    {
        public enum Id : uint
        {
            PositionX = 32,
            PositionY = 64,
            DeltaX = 96,
            DeltaY = 128,
            Pressure = 160,
            RadiusX = 192,
            RadiusY = 224,
            Press = 256,
        }

        private int Padding0;
        public float PositionX;
        public float PositionY;
        public float DeltaX;
        public float DeltaY;
        public float Pressure;
        public float RadiusX;
        public float RadiusY;
        private int Padding1;

        public unsafe bool Press
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[32] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[32] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[32] &= ~(1 << 0) & 0xFF;
            }
        }

        public uint Format => 1543820981;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // PointerEvent -> PointerInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionX,
                    OutputId = (uint)PointerInput.Id.PositionX
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionY,
                    OutputId = (uint)PointerInput.Id.PositionY
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaX,
                    OutputId = (uint)PointerInput.Id.DeltaX
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaY,
                    OutputId = (uint)PointerInput.Id.DeltaY
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.Pressure,
                    OutputId = (uint)PointerInput.Id.Pressure
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusX,
                    OutputId = (uint)PointerInput.Id.RadiusX
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusY,
                    OutputId = (uint)PointerInput.Id.RadiusY
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Press,
                    OutputId = (uint)PointerInput.Id.Press
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 1543820981,
                    OutputFormat = 1030053651,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<PointerEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<PointerInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 8
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 8;
    }

    public struct PointerInput : IComponentData, IInputData
    {
        public Float2Input Position;
        public Float2Input Delta;
        public Float2Input Radius;
        public HalfAxisInput Pressure;
        public FloatInput PositionX;
        public FloatInput PositionY;
        public FloatInput DeltaX;
        public FloatInput DeltaY;
        public FloatInput RadiusX;
        public FloatInput RadiusY;
        public ButtonInput Press;

        public enum Id : uint
        {
            Position = 0,
            Delta = 64,
            Radius = 128,
            Pressure = 192,
            PositionX = 224,
            PositionY = 256,
            DeltaX = 288,
            DeltaY = 320,
            RadiusX = 352,
            RadiusY = 384,
            Press = 416,
        }
        public uint Format => 1030053651;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.PositionX,
                    InputId2 = (uint)Id.PositionY,
                    OutputId = (uint)Id.Position
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.DeltaX,
                    InputId2 = (uint)Id.DeltaY,
                    OutputId = (uint)Id.Delta
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.RadiusX,
                    InputId2 = (uint)Id.RadiusY,
                    OutputId = (uint)Id.Radius
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 1030053651,
                    OutputFormat = 1030053651,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<PointerInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<PointerInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 3
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 3;
    }
}
