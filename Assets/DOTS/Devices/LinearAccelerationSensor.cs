//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from LinearAccelerationSensor Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct LinearAccelerationSensorEvent : IInputData
    {
        public enum Id : uint
        {
            AccelerationX = 0,
            AccelerationY = 32,
            AccelerationZ = 64,
        }

        public float AccelerationX;
        public float AccelerationY;
        public float AccelerationZ;

        public uint Format => 3031528863;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // LinearAccelerationSensorEvent -> LinearAccelerationSensorInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.AccelerationX,
                    OutputId = (uint)LinearAccelerationSensorInput.Id.AccelerationX
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.AccelerationY,
                    OutputId = (uint)LinearAccelerationSensorInput.Id.AccelerationY
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.AccelerationZ,
                    OutputId = (uint)LinearAccelerationSensorInput.Id.AccelerationZ
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3031528863,
                    OutputFormat = 3587243065,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<LinearAccelerationSensorEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<LinearAccelerationSensorInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 3
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 3;
    }

    public struct LinearAccelerationSensorInput : IComponentData, IInputData
    {
        public Float3Input Acceleration;
        public FloatInput AccelerationX;
        public FloatInput AccelerationY;
        public FloatInput AccelerationZ;

        public enum Id : uint
        {
            Acceleration = 0,
            AccelerationX = 96,
            AccelerationY = 128,
            AccelerationZ = 160,
        }
        public uint Format => 3587243065;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.ThreeAxesToOneFloat3),
                    InputId1 = (uint)Id.AccelerationX,
                    InputId2 = (uint)Id.AccelerationY,
                    InputId3 = (uint)Id.AccelerationZ,
                    OutputId = (uint)Id.Acceleration
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3587243065,
                    OutputFormat = 3587243065,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<LinearAccelerationSensorInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<LinearAccelerationSensorInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 1
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 1;
    }
}
