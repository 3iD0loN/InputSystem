//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from XInputControllerWindows Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct XInputControllerWindowsEvent : IInputData
    {
        public enum Id : uint
        {
            DpadUp = 0,
            DpadDown = 1,
            DpadLeft = 2,
            DpadRight = 3,
            Start = 4,
            Select = 5,
            LeftStickPress = 6,
            RightStickPress = 7,
            LeftShoulder = 8,
            RightShoulder = 9,
            ButtonSouth = 12,
            ButtonEast = 13,
            ButtonWest = 14,
            ButtonNorth = 15,
            LeftTrigger = 16,
            RightTrigger = 24,
            LeftStickX = 32,
            LeftStickY = 48,
            RightStickX = 64,
            RightStickY = 80,
        }

        private short Padding0;
        public byte LeftTrigger;
        public byte RightTrigger;
        public short LeftStickX;
        public short LeftStickY;
        public short RightStickX;
        public short RightStickY;

        public unsafe bool DpadUp
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool DpadDown
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool DpadLeft
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool DpadRight
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Start
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool Select
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool LeftStickPress
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool RightStickPress
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool LeftShoulder
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool RightShoulder
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool ButtonSouth
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool ButtonEast
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool ButtonWest
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool ButtonNorth
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 7) & 0xFF;
            }
        }

        public uint Format => 3551069509;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // XInputControllerWindowsEvent -> XInputControllerWindowsInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadUp,
                    OutputId = (uint)XInputControllerWindowsInput.Id.DpadUp
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadDown,
                    OutputId = (uint)XInputControllerWindowsInput.Id.DpadDown
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadLeft,
                    OutputId = (uint)XInputControllerWindowsInput.Id.DpadLeft
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadRight,
                    OutputId = (uint)XInputControllerWindowsInput.Id.DpadRight
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Start,
                    OutputId = (uint)XInputControllerWindowsInput.Id.Start
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Select,
                    OutputId = (uint)XInputControllerWindowsInput.Id.Select
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftStickPress,
                    OutputId = (uint)XInputControllerWindowsInput.Id.LeftStickPress
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightStickPress,
                    OutputId = (uint)XInputControllerWindowsInput.Id.RightStickPress
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftShoulder,
                    OutputId = (uint)XInputControllerWindowsInput.Id.LeftShoulder
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightShoulder,
                    OutputId = (uint)XInputControllerWindowsInput.Id.RightShoulder
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonSouth,
                    OutputId = (uint)XInputControllerWindowsInput.Id.ButtonSouth
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonEast,
                    OutputId = (uint)XInputControllerWindowsInput.Id.ButtonEast
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonWest,
                    OutputId = (uint)XInputControllerWindowsInput.Id.ButtonWest
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonNorth,
                    OutputId = (uint)XInputControllerWindowsInput.Id.ButtonNorth
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.ByteToButton),
                    InputId1 = (uint)Id.LeftTrigger,
                    OutputId = (uint)XInputControllerWindowsInput.Id.LeftTrigger
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.ByteToButton),
                    InputId1 = (uint)Id.RightTrigger,
                    OutputId = (uint)XInputControllerWindowsInput.Id.RightTrigger
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3551069509,
                    OutputFormat = 2999487715,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<XInputControllerWindowsEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<XInputControllerWindowsInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 16
                };

                // XInputControllerWindowsEvent -> XInputControllerInput
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadUp,
                    OutputId = (uint)XInputControllerInput.Id.DpadUp
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadDown,
                    OutputId = (uint)XInputControllerInput.Id.DpadDown
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadLeft,
                    OutputId = (uint)XInputControllerInput.Id.DpadLeft
                };
                transforms[19] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadRight,
                    OutputId = (uint)XInputControllerInput.Id.DpadRight
                };
                transforms[20] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Start,
                    OutputId = (uint)XInputControllerInput.Id.Start
                };
                transforms[21] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Select,
                    OutputId = (uint)XInputControllerInput.Id.Select
                };
                transforms[22] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftStickPress,
                    OutputId = (uint)XInputControllerInput.Id.LeftStickPress
                };
                transforms[23] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightStickPress,
                    OutputId = (uint)XInputControllerInput.Id.RightStickPress
                };
                transforms[24] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftShoulder,
                    OutputId = (uint)XInputControllerInput.Id.LeftShoulder
                };
                transforms[25] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightShoulder,
                    OutputId = (uint)XInputControllerInput.Id.RightShoulder
                };
                transforms[26] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonSouth,
                    OutputId = (uint)XInputControllerInput.Id.ButtonSouth
                };
                transforms[27] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonEast,
                    OutputId = (uint)XInputControllerInput.Id.ButtonEast
                };
                transforms[28] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonWest,
                    OutputId = (uint)XInputControllerInput.Id.ButtonWest
                };
                transforms[29] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonNorth,
                    OutputId = (uint)XInputControllerInput.Id.ButtonNorth
                };
                transforms[30] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.ByteToButton),
                    InputId1 = (uint)Id.LeftTrigger,
                    OutputId = (uint)XInputControllerInput.Id.LeftTrigger
                };
                transforms[31] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.ByteToButton),
                    InputId1 = (uint)Id.RightTrigger,
                    OutputId = (uint)XInputControllerInput.Id.RightTrigger
                };
                structMappings[1] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3551069509,
                    OutputFormat = 3926081804,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<XInputControllerWindowsEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<XInputControllerInput>(),
                    TransformStartIndex = 16,
                    TransformCount = 16
                };

                // XInputControllerWindowsEvent -> GamepadInput
                transforms[32] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadUp,
                    OutputId = (uint)GamepadInput.Id.DpadUp
                };
                transforms[33] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadDown,
                    OutputId = (uint)GamepadInput.Id.DpadDown
                };
                transforms[34] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadLeft,
                    OutputId = (uint)GamepadInput.Id.DpadLeft
                };
                transforms[35] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadRight,
                    OutputId = (uint)GamepadInput.Id.DpadRight
                };
                transforms[36] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Start,
                    OutputId = (uint)GamepadInput.Id.Start
                };
                transforms[37] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Select,
                    OutputId = (uint)GamepadInput.Id.Select
                };
                transforms[38] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftStickPress,
                    OutputId = (uint)GamepadInput.Id.LeftStickPress
                };
                transforms[39] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightStickPress,
                    OutputId = (uint)GamepadInput.Id.RightStickPress
                };
                transforms[40] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftShoulder,
                    OutputId = (uint)GamepadInput.Id.LeftShoulder
                };
                transforms[41] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightShoulder,
                    OutputId = (uint)GamepadInput.Id.RightShoulder
                };
                transforms[42] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonSouth,
                    OutputId = (uint)GamepadInput.Id.ButtonSouth
                };
                transforms[43] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonEast,
                    OutputId = (uint)GamepadInput.Id.ButtonEast
                };
                transforms[44] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonWest,
                    OutputId = (uint)GamepadInput.Id.ButtonWest
                };
                transforms[45] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonNorth,
                    OutputId = (uint)GamepadInput.Id.ButtonNorth
                };
                transforms[46] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.ByteToButton),
                    InputId1 = (uint)Id.LeftTrigger,
                    OutputId = (uint)GamepadInput.Id.LeftTrigger
                };
                transforms[47] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.ByteToButton),
                    InputId1 = (uint)Id.RightTrigger,
                    OutputId = (uint)GamepadInput.Id.RightTrigger
                };
                structMappings[2] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3551069509,
                    OutputFormat = 623278190,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<XInputControllerWindowsEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<GamepadInput>(),
                    TransformStartIndex = 32,
                    TransformCount = 16
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 3;
        private const int kTransformCount = 48;
    }

    public struct XInputControllerWindowsInput : IComponentData, IInputData
    {
        public Float2Input Dpad;
        public Float2Input LeftStick;
        public Float2Input RightStick;
        public HalfAxisInput LeftTrigger;
        public HalfAxisInput RightTrigger;
        public FloatInput DpadX;
        public FloatInput DpadY;
        public HalfAxisInput LeftStickUp;
        public AxisInput LeftStickX;
        public AxisInput LeftStickY;
        public HalfAxisInput LeftStickDown;
        public HalfAxisInput LeftStickLeft;
        public HalfAxisInput LeftStickRight;
        public HalfAxisInput RightStickUp;
        public AxisInput RightStickX;
        public AxisInput RightStickY;
        public HalfAxisInput RightStickDown;
        public HalfAxisInput RightStickLeft;
        public HalfAxisInput RightStickRight;
        public ButtonInput Start;
        public ButtonInput Select;
        public ButtonInput LeftStickPress;
        public ButtonInput RightStickPress;
        public ButtonInput LeftShoulder;
        public ButtonInput RightShoulder;
        public ButtonInput ButtonSouth;
        public ButtonInput ButtonEast;
        public ButtonInput ButtonWest;
        public ButtonInput ButtonNorth;
        public ButtonInput ButtonLeftTrigger;
        public ButtonInput ButtonRightTrigger;
        public ButtonInput DpadUp;
        public ButtonInput DpadDown;
        public ButtonInput DpadLeft;
        public ButtonInput DpadRight;
        public ButtonInput ButtonLeftStickUp;
        public ButtonInput ButtonLeftStickDown;
        public ButtonInput ButtonLeftStickLeft;
        public ButtonInput ButtonLeftStickRight;
        public ButtonInput ButtonRightStickUp;
        public ButtonInput ButtonRightStickDown;
        public ButtonInput ButtonRightStickLeft;
        public ButtonInput ButtonRightStickRight;

        public enum Id : uint
        {
            Dpad = 0,
            LeftStick = 64,
            RightStick = 128,
            LeftTrigger = 192,
            RightTrigger = 224,
            DpadX = 256,
            DpadY = 288,
            LeftStickUp = 320,
            LeftStickX = 352,
            LeftStickY = 384,
            LeftStickDown = 416,
            LeftStickLeft = 448,
            LeftStickRight = 480,
            RightStickUp = 512,
            RightStickX = 544,
            RightStickY = 576,
            RightStickDown = 608,
            RightStickLeft = 640,
            RightStickRight = 672,
            Start = 704,
            Select = 712,
            LeftStickPress = 720,
            RightStickPress = 728,
            LeftShoulder = 736,
            RightShoulder = 744,
            ButtonSouth = 752,
            ButtonEast = 760,
            ButtonWest = 768,
            ButtonNorth = 776,
            ButtonLeftTrigger = 784,
            ButtonRightTrigger = 792,
            DpadUp = 800,
            DpadDown = 808,
            DpadLeft = 816,
            DpadRight = 824,
            ButtonLeftStickUp = 832,
            ButtonLeftStickDown = 840,
            ButtonLeftStickLeft = 848,
            ButtonLeftStickRight = 856,
            ButtonRightStickUp = 864,
            ButtonRightStickDown = 872,
            ButtonRightStickLeft = 880,
            ButtonRightStickRight = 888,
        }
        public uint Format => 2999487715;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.DpadX,
                    InputId2 = (uint)Id.DpadY,
                    OutputId = (uint)Id.Dpad
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.LeftStickX,
                    InputId2 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStick
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.RightStickX,
                    InputId2 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStick
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStickUp
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickUp,
                    OutputId = (uint)Id.ButtonLeftStickUp
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStickDown
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickDown,
                    OutputId = (uint)Id.ButtonLeftStickDown
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)Id.LeftStickLeft
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickLeft,
                    OutputId = (uint)Id.ButtonLeftStickLeft
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)Id.LeftStickRight
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickRight,
                    OutputId = (uint)Id.ButtonLeftStickRight
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStickUp
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickUp,
                    OutputId = (uint)Id.ButtonRightStickUp
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStickDown
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickDown,
                    OutputId = (uint)Id.ButtonRightStickDown
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)Id.RightStickLeft
                };
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickLeft,
                    OutputId = (uint)Id.ButtonRightStickLeft
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)Id.RightStickRight
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickRight,
                    OutputId = (uint)Id.ButtonRightStickRight
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 2999487715,
                    OutputFormat = 2999487715,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<XInputControllerWindowsInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<XInputControllerWindowsInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 19
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 19;
    }
}
