//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from DualShock4GampadiOS Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct DualShock4GampadiOSEvent : IInputData
    {
        public enum Id : uint
        {
            DpadUp = 0,
            DpadDown = 1,
            DpadLeft = 2,
            DpadRight = 3,
            LeftStickPress = 4,
            RightStickPress = 5,
            LeftShoulder = 6,
            RightShoulder = 7,
            ButtonWest = 10,
            ButtonNorth = 11,
            ButtonSouth = 12,
            ButtonEast = 13,
            Start = 14,
            Select = 15,
            LeftTrigger = 288,
            RightTrigger = 320,
            LeftStickX = 544,
            LeftStickY = 576,
            RightStickX = 608,
            RightStickY = 640,
            TouchpadButton = 672,
        }

        private long Padding0;
        private long Padding1;
        private long Padding2;
        private long Padding3;
        private int Padding4;
        public float LeftTrigger;
        public float RightTrigger;
        private long Padding5;
        private long Padding6;
        private long Padding7;
        public float LeftStickX;
        public float LeftStickY;
        public float RightStickX;
        public float RightStickY;
        private int Padding8;

        public unsafe bool DpadUp
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool DpadDown
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool DpadLeft
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool DpadRight
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool LeftStickPress
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool RightStickPress
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool LeftShoulder
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool RightShoulder
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool ButtonWest
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool ButtonNorth
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool ButtonSouth
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool ButtonEast
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool Start
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool Select
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool TouchpadButton
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[84] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[84] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[84] &= ~(1 << 0) & 0xFF;
            }
        }

        public uint Format => 2690434371;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // DualShock4GampadiOSEvent -> DualShock4GampadiOSInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadUp,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.DpadUp
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadDown,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.DpadDown
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadLeft,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.DpadLeft
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadRight,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.DpadRight
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftStickPress,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.LeftStickPress
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightStickPress,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.RightStickPress
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftShoulder,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.LeftShoulder
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightShoulder,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.RightShoulder
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonWest,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.ButtonWest
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonNorth,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.ButtonNorth
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonSouth,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.ButtonSouth
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonEast,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.ButtonEast
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Start,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.Start
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Select,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.Select
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.LeftStickX
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.LeftStickY
                };
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.RightStickX
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.RightStickY
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.TouchpadButton,
                    OutputId = (uint)DualShock4GampadiOSInput.Id.TouchpadButton
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 2690434371,
                    OutputFormat = 3242020069,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<DualShock4GampadiOSEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<DualShock4GampadiOSInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 19
                };

                // DualShock4GampadiOSEvent -> DualShockGamepadInput
                transforms[19] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadUp,
                    OutputId = (uint)DualShockGamepadInput.Id.DpadUp
                };
                transforms[20] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadDown,
                    OutputId = (uint)DualShockGamepadInput.Id.DpadDown
                };
                transforms[21] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadLeft,
                    OutputId = (uint)DualShockGamepadInput.Id.DpadLeft
                };
                transforms[22] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadRight,
                    OutputId = (uint)DualShockGamepadInput.Id.DpadRight
                };
                transforms[23] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftStickPress,
                    OutputId = (uint)DualShockGamepadInput.Id.LeftStickPress
                };
                transforms[24] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightStickPress,
                    OutputId = (uint)DualShockGamepadInput.Id.RightStickPress
                };
                transforms[25] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftShoulder,
                    OutputId = (uint)DualShockGamepadInput.Id.LeftShoulder
                };
                transforms[26] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightShoulder,
                    OutputId = (uint)DualShockGamepadInput.Id.RightShoulder
                };
                transforms[27] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonWest,
                    OutputId = (uint)DualShockGamepadInput.Id.ButtonWest
                };
                transforms[28] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonNorth,
                    OutputId = (uint)DualShockGamepadInput.Id.ButtonNorth
                };
                transforms[29] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonSouth,
                    OutputId = (uint)DualShockGamepadInput.Id.ButtonSouth
                };
                transforms[30] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonEast,
                    OutputId = (uint)DualShockGamepadInput.Id.ButtonEast
                };
                transforms[31] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Start,
                    OutputId = (uint)DualShockGamepadInput.Id.Start
                };
                transforms[32] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Select,
                    OutputId = (uint)DualShockGamepadInput.Id.Select
                };
                transforms[33] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)DualShockGamepadInput.Id.LeftStickX
                };
                transforms[34] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)DualShockGamepadInput.Id.LeftStickY
                };
                transforms[35] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)DualShockGamepadInput.Id.RightStickX
                };
                transforms[36] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)DualShockGamepadInput.Id.RightStickY
                };
                transforms[37] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.TouchpadButton,
                    OutputId = (uint)DualShockGamepadInput.Id.TouchpadButton
                };
                structMappings[1] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 2690434371,
                    OutputFormat = 1290703193,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<DualShock4GampadiOSEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<DualShockGamepadInput>(),
                    TransformStartIndex = 19,
                    TransformCount = 19
                };

                // DualShock4GampadiOSEvent -> GamepadInput
                transforms[38] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadUp,
                    OutputId = (uint)GamepadInput.Id.DpadUp
                };
                transforms[39] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadDown,
                    OutputId = (uint)GamepadInput.Id.DpadDown
                };
                transforms[40] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadLeft,
                    OutputId = (uint)GamepadInput.Id.DpadLeft
                };
                transforms[41] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DpadRight,
                    OutputId = (uint)GamepadInput.Id.DpadRight
                };
                transforms[42] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftStickPress,
                    OutputId = (uint)GamepadInput.Id.LeftStickPress
                };
                transforms[43] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightStickPress,
                    OutputId = (uint)GamepadInput.Id.RightStickPress
                };
                transforms[44] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftShoulder,
                    OutputId = (uint)GamepadInput.Id.LeftShoulder
                };
                transforms[45] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightShoulder,
                    OutputId = (uint)GamepadInput.Id.RightShoulder
                };
                transforms[46] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonWest,
                    OutputId = (uint)GamepadInput.Id.ButtonWest
                };
                transforms[47] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonNorth,
                    OutputId = (uint)GamepadInput.Id.ButtonNorth
                };
                transforms[48] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonSouth,
                    OutputId = (uint)GamepadInput.Id.ButtonSouth
                };
                transforms[49] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ButtonEast,
                    OutputId = (uint)GamepadInput.Id.ButtonEast
                };
                transforms[50] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Start,
                    OutputId = (uint)GamepadInput.Id.Start
                };
                transforms[51] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Select,
                    OutputId = (uint)GamepadInput.Id.Select
                };
                transforms[52] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)GamepadInput.Id.LeftStickX
                };
                transforms[53] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)GamepadInput.Id.LeftStickY
                };
                transforms[54] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)GamepadInput.Id.RightStickX
                };
                transforms[55] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)GamepadInput.Id.RightStickY
                };
                structMappings[2] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 2690434371,
                    OutputFormat = 623278190,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<DualShock4GampadiOSEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<GamepadInput>(),
                    TransformStartIndex = 38,
                    TransformCount = 18
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 3;
        private const int kTransformCount = 56;
    }

    public struct DualShock4GampadiOSInput : IComponentData, IInputData
    {
        public Float2Input Dpad;
        public Float2Input LeftStick;
        public Float2Input RightStick;
        public HalfAxisInput LeftTrigger;
        public HalfAxisInput RightTrigger;
        public FloatInput DpadX;
        public FloatInput DpadY;
        public HalfAxisInput LeftStickUp;
        public AxisInput LeftStickX;
        public AxisInput LeftStickY;
        public HalfAxisInput LeftStickDown;
        public HalfAxisInput LeftStickLeft;
        public HalfAxisInput LeftStickRight;
        public HalfAxisInput RightStickUp;
        public AxisInput RightStickX;
        public AxisInput RightStickY;
        public HalfAxisInput RightStickDown;
        public HalfAxisInput RightStickLeft;
        public HalfAxisInput RightStickRight;
        public ButtonInput ButtonSouth;
        public ButtonInput ButtonWest;
        public ButtonInput ButtonNorth;
        public ButtonInput ButtonEast;
        public ButtonInput LeftStickPress;
        public ButtonInput RightStickPress;
        public ButtonInput LeftShoulder;
        public ButtonInput RightShoulder;
        public ButtonInput Start;
        public ButtonInput Select;
        public ButtonInput ButtonLeftTrigger;
        public ButtonInput ButtonRightTrigger;
        public ButtonInput TouchpadButton;
        public ButtonInput DpadUp;
        public ButtonInput DpadDown;
        public ButtonInput DpadLeft;
        public ButtonInput DpadRight;
        public ButtonInput ButtonLeftStickUp;
        public ButtonInput ButtonLeftStickDown;
        public ButtonInput ButtonLeftStickLeft;
        public ButtonInput ButtonLeftStickRight;
        public ButtonInput ButtonRightStickUp;
        public ButtonInput ButtonRightStickDown;
        public ButtonInput ButtonRightStickLeft;
        public ButtonInput ButtonRightStickRight;

        public enum Id : uint
        {
            Dpad = 0,
            LeftStick = 64,
            RightStick = 128,
            LeftTrigger = 192,
            RightTrigger = 224,
            DpadX = 256,
            DpadY = 288,
            LeftStickUp = 320,
            LeftStickX = 352,
            LeftStickY = 384,
            LeftStickDown = 416,
            LeftStickLeft = 448,
            LeftStickRight = 480,
            RightStickUp = 512,
            RightStickX = 544,
            RightStickY = 576,
            RightStickDown = 608,
            RightStickLeft = 640,
            RightStickRight = 672,
            ButtonSouth = 704,
            ButtonWest = 712,
            ButtonNorth = 720,
            ButtonEast = 728,
            LeftStickPress = 736,
            RightStickPress = 744,
            LeftShoulder = 752,
            RightShoulder = 760,
            Start = 768,
            Select = 776,
            ButtonLeftTrigger = 784,
            ButtonRightTrigger = 792,
            TouchpadButton = 800,
            DpadUp = 808,
            DpadDown = 816,
            DpadLeft = 824,
            DpadRight = 832,
            ButtonLeftStickUp = 840,
            ButtonLeftStickDown = 848,
            ButtonLeftStickLeft = 856,
            ButtonLeftStickRight = 864,
            ButtonRightStickUp = 872,
            ButtonRightStickDown = 880,
            ButtonRightStickLeft = 888,
            ButtonRightStickRight = 896,
        }
        public uint Format => 3242020069;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.DpadX,
                    InputId2 = (uint)Id.DpadY,
                    OutputId = (uint)Id.Dpad
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.LeftStickX,
                    InputId2 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStick
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.RightStickX,
                    InputId2 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStick
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStickUp
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickUp,
                    OutputId = (uint)Id.ButtonLeftStickUp
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStickDown
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickDown,
                    OutputId = (uint)Id.ButtonLeftStickDown
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)Id.LeftStickLeft
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickLeft,
                    OutputId = (uint)Id.ButtonLeftStickLeft
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)Id.LeftStickRight
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickRight,
                    OutputId = (uint)Id.ButtonLeftStickRight
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStickUp
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickUp,
                    OutputId = (uint)Id.ButtonRightStickUp
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStickDown
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickDown,
                    OutputId = (uint)Id.ButtonRightStickDown
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)Id.RightStickLeft
                };
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickLeft,
                    OutputId = (uint)Id.ButtonRightStickLeft
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)Id.RightStickRight
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickRight,
                    OutputId = (uint)Id.ButtonRightStickRight
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3242020069,
                    OutputFormat = 3242020069,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<DualShock4GampadiOSInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<DualShock4GampadiOSInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 19
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 19;
    }
}
