//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from XRHMD Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct XRHMDEvent : IInputData
    {
        public enum Id : uint
        {
            LeftEyePositionX = 0,
            LeftEyePositionY = 32,
            LeftEyePositionZ = 64,
            LeftEyeRotationX = 128,
            LeftEyeRotationY = 160,
            LeftEyeRotationZ = 192,
            LeftEyeRotationW = 224,
            RightEyePositionX = 256,
            RightEyePositionY = 288,
            RightEyePositionZ = 320,
            RightEyeRotationX = 384,
            RightEyeRotationY = 416,
            RightEyeRotationZ = 448,
            RightEyeRotationW = 480,
            CenterEyePositionX = 512,
            CenterEyePositionY = 544,
            CenterEyePositionZ = 576,
            CenterEyeRotationX = 640,
            CenterEyeRotationY = 672,
            CenterEyeRotationZ = 704,
            CenterEyeRotationW = 736,
            TrackingState = 768,
            IsTracked = 800,
            DevicePositionX = 832,
            DevicePositionY = 864,
            DevicePositionZ = 896,
            DeviceRotationX = 960,
            DeviceRotationY = 992,
            DeviceRotationZ = 1024,
            DeviceRotationW = 1056,
        }

        public float LeftEyePositionX;
        public float LeftEyePositionY;
        public float LeftEyePositionZ;
        private int Padding0;
        public float LeftEyeRotationX;
        public float LeftEyeRotationY;
        public float LeftEyeRotationZ;
        public float LeftEyeRotationW;
        public float RightEyePositionX;
        public float RightEyePositionY;
        public float RightEyePositionZ;
        private int Padding1;
        public float RightEyeRotationX;
        public float RightEyeRotationY;
        public float RightEyeRotationZ;
        public float RightEyeRotationW;
        public float CenterEyePositionX;
        public float CenterEyePositionY;
        public float CenterEyePositionZ;
        private int Padding2;
        public float CenterEyeRotationX;
        public float CenterEyeRotationY;
        public float CenterEyeRotationZ;
        public float CenterEyeRotationW;
        public int TrackingState;
        private int Padding3;
        public float DevicePositionX;
        public float DevicePositionY;
        public float DevicePositionZ;
        private int Padding4;
        public float DeviceRotationX;
        public float DeviceRotationY;
        public float DeviceRotationZ;
        public float DeviceRotationW;

        public unsafe bool IsTracked
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[100] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[100] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[100] &= ~(1 << 0) & 0xFF;
            }
        }

        public uint Format => 2495518143;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // XRHMDEvent -> XRHMDInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftEyePositionX,
                    OutputId = (uint)XRHMDInput.Id.LeftEyePositionX
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftEyePositionY,
                    OutputId = (uint)XRHMDInput.Id.LeftEyePositionY
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftEyePositionZ,
                    OutputId = (uint)XRHMDInput.Id.LeftEyePositionZ
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftEyeRotationX,
                    OutputId = (uint)XRHMDInput.Id.LeftEyeRotationX
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftEyeRotationY,
                    OutputId = (uint)XRHMDInput.Id.LeftEyeRotationY
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftEyeRotationZ,
                    OutputId = (uint)XRHMDInput.Id.LeftEyeRotationZ
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftEyeRotationW,
                    OutputId = (uint)XRHMDInput.Id.LeftEyeRotationW
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightEyePositionX,
                    OutputId = (uint)XRHMDInput.Id.RightEyePositionX
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightEyePositionY,
                    OutputId = (uint)XRHMDInput.Id.RightEyePositionY
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightEyePositionZ,
                    OutputId = (uint)XRHMDInput.Id.RightEyePositionZ
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightEyeRotationX,
                    OutputId = (uint)XRHMDInput.Id.RightEyeRotationX
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightEyeRotationY,
                    OutputId = (uint)XRHMDInput.Id.RightEyeRotationY
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightEyeRotationZ,
                    OutputId = (uint)XRHMDInput.Id.RightEyeRotationZ
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightEyeRotationW,
                    OutputId = (uint)XRHMDInput.Id.RightEyeRotationW
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.CenterEyePositionX,
                    OutputId = (uint)XRHMDInput.Id.CenterEyePositionX
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.CenterEyePositionY,
                    OutputId = (uint)XRHMDInput.Id.CenterEyePositionY
                };
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.CenterEyePositionZ,
                    OutputId = (uint)XRHMDInput.Id.CenterEyePositionZ
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.CenterEyeRotationX,
                    OutputId = (uint)XRHMDInput.Id.CenterEyeRotationX
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.CenterEyeRotationY,
                    OutputId = (uint)XRHMDInput.Id.CenterEyeRotationY
                };
                transforms[19] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.CenterEyeRotationZ,
                    OutputId = (uint)XRHMDInput.Id.CenterEyeRotationZ
                };
                transforms[20] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.CenterEyeRotationW,
                    OutputId = (uint)XRHMDInput.Id.CenterEyeRotationW
                };
                transforms[21] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.IsTracked,
                    OutputId = (uint)XRHMDInput.Id.IsTracked
                };
                transforms[22] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DevicePositionX,
                    OutputId = (uint)XRHMDInput.Id.DevicePositionX
                };
                transforms[23] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DevicePositionY,
                    OutputId = (uint)XRHMDInput.Id.DevicePositionY
                };
                transforms[24] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DevicePositionZ,
                    OutputId = (uint)XRHMDInput.Id.DevicePositionZ
                };
                transforms[25] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationX,
                    OutputId = (uint)XRHMDInput.Id.DeviceRotationX
                };
                transforms[26] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationY,
                    OutputId = (uint)XRHMDInput.Id.DeviceRotationY
                };
                transforms[27] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationZ,
                    OutputId = (uint)XRHMDInput.Id.DeviceRotationZ
                };
                transforms[28] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationW,
                    OutputId = (uint)XRHMDInput.Id.DeviceRotationW
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 2495518143,
                    OutputFormat = 4125039641,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<XRHMDEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<XRHMDInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 29
                };

                // XRHMDEvent -> TrackedDeviceInput
                transforms[29] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.IsTracked,
                    OutputId = (uint)TrackedDeviceInput.Id.IsTracked
                };
                transforms[30] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DevicePositionX,
                    OutputId = (uint)TrackedDeviceInput.Id.DevicePositionX
                };
                transforms[31] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DevicePositionY,
                    OutputId = (uint)TrackedDeviceInput.Id.DevicePositionY
                };
                transforms[32] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DevicePositionZ,
                    OutputId = (uint)TrackedDeviceInput.Id.DevicePositionZ
                };
                transforms[33] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationX,
                    OutputId = (uint)TrackedDeviceInput.Id.DeviceRotationX
                };
                transforms[34] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationY,
                    OutputId = (uint)TrackedDeviceInput.Id.DeviceRotationY
                };
                transforms[35] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationZ,
                    OutputId = (uint)TrackedDeviceInput.Id.DeviceRotationZ
                };
                transforms[36] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeviceRotationW,
                    OutputId = (uint)TrackedDeviceInput.Id.DeviceRotationW
                };
                structMappings[1] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 2495518143,
                    OutputFormat = 462727361,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<XRHMDEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<TrackedDeviceInput>(),
                    TransformStartIndex = 29,
                    TransformCount = 8
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 2;
        private const int kTransformCount = 37;
    }

    public struct XRHMDInput : IComponentData, IInputData
    {
        public Float3Input LeftEyePosition;
        public Float3Input RightEyePosition;
        public Float3Input CenterEyePosition;
        public Float3Input DevicePosition;
        public FloatInput LeftEyePositionX;
        public FloatInput LeftEyePositionY;
        public FloatInput LeftEyePositionZ;
        public FloatInput LeftEyeRotationX;
        public FloatInput LeftEyeRotationY;
        public FloatInput LeftEyeRotationZ;
        public FloatInput LeftEyeRotationW;
        public FloatInput RightEyePositionX;
        public FloatInput RightEyePositionY;
        public FloatInput RightEyePositionZ;
        public FloatInput RightEyeRotationX;
        public FloatInput RightEyeRotationY;
        public FloatInput RightEyeRotationZ;
        public FloatInput RightEyeRotationW;
        public FloatInput CenterEyePositionX;
        public FloatInput CenterEyePositionY;
        public FloatInput CenterEyePositionZ;
        public FloatInput CenterEyeRotationX;
        public FloatInput CenterEyeRotationY;
        public FloatInput CenterEyeRotationZ;
        public FloatInput CenterEyeRotationW;
        public FloatInput DevicePositionX;
        public FloatInput DevicePositionY;
        public FloatInput DevicePositionZ;
        public FloatInput DeviceRotationX;
        public FloatInput DeviceRotationY;
        public FloatInput DeviceRotationZ;
        public FloatInput DeviceRotationW;
        public ButtonInput IsTracked;

        public enum Id : uint
        {
            LeftEyePosition = 0,
            RightEyePosition = 96,
            CenterEyePosition = 192,
            DevicePosition = 288,
            LeftEyePositionX = 384,
            LeftEyePositionY = 416,
            LeftEyePositionZ = 448,
            LeftEyeRotationX = 480,
            LeftEyeRotationY = 512,
            LeftEyeRotationZ = 544,
            LeftEyeRotationW = 576,
            RightEyePositionX = 608,
            RightEyePositionY = 640,
            RightEyePositionZ = 672,
            RightEyeRotationX = 704,
            RightEyeRotationY = 736,
            RightEyeRotationZ = 768,
            RightEyeRotationW = 800,
            CenterEyePositionX = 832,
            CenterEyePositionY = 864,
            CenterEyePositionZ = 896,
            CenterEyeRotationX = 928,
            CenterEyeRotationY = 960,
            CenterEyeRotationZ = 992,
            CenterEyeRotationW = 1024,
            DevicePositionX = 1056,
            DevicePositionY = 1088,
            DevicePositionZ = 1120,
            DeviceRotationX = 1152,
            DeviceRotationY = 1184,
            DeviceRotationZ = 1216,
            DeviceRotationW = 1248,
            IsTracked = 1280,
        }
        public uint Format => 4125039641;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.ThreeAxesToOneFloat3),
                    InputId1 = (uint)Id.LeftEyePositionX,
                    InputId2 = (uint)Id.LeftEyePositionY,
                    InputId3 = (uint)Id.LeftEyePositionZ,
                    OutputId = (uint)Id.LeftEyePosition
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.ThreeAxesToOneFloat3),
                    InputId1 = (uint)Id.RightEyePositionX,
                    InputId2 = (uint)Id.RightEyePositionY,
                    InputId3 = (uint)Id.RightEyePositionZ,
                    OutputId = (uint)Id.RightEyePosition
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.ThreeAxesToOneFloat3),
                    InputId1 = (uint)Id.CenterEyePositionX,
                    InputId2 = (uint)Id.CenterEyePositionY,
                    InputId3 = (uint)Id.CenterEyePositionZ,
                    OutputId = (uint)Id.CenterEyePosition
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.ThreeAxesToOneFloat3),
                    InputId1 = (uint)Id.DevicePositionX,
                    InputId2 = (uint)Id.DevicePositionY,
                    InputId3 = (uint)Id.DevicePositionZ,
                    OutputId = (uint)Id.DevicePosition
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 4125039641,
                    OutputFormat = 4125039641,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<XRHMDInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<XRHMDInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 4
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 4;
    }
}
