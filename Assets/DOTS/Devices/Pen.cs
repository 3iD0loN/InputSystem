//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from Pen Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct PenEvent : IInputData
    {
        public enum Id : uint
        {
            PositionX = 0,
            PositionY = 32,
            DeltaX = 64,
            DeltaY = 96,
            TiltX = 128,
            TiltY = 160,
            Pressure = 192,
            Twist = 224,
            Tip = 256,
            Eraser = 257,
            Barrel1 = 258,
            Barrel2 = 259,
            Barrel3 = 261,
            Barrel4 = 262,
            RadiusX = 320,
            RadiusY = 352,
            PointerId = 384,
        }

        public float PositionX;
        public float PositionY;
        public float DeltaX;
        public float DeltaY;
        public float TiltX;
        public float TiltY;
        public float Pressure;
        public float Twist;
        private long Padding0;
        public float RadiusX;
        public float RadiusY;
        public uint PointerId;

        public unsafe bool Tip
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[32] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[32] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[32] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool Eraser
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[32] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[32] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[32] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool Barrel1
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[32] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[32] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[32] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool Barrel2
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[32] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[32] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[32] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Barrel3
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[32] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[32] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[32] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool Barrel4
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[32] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[32] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[32] &= ~(1 << 6) & 0xFF;
            }
        }

        public uint Format => 935340987;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // PenEvent -> PenInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionX,
                    OutputId = (uint)PenInput.Id.PositionX
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionY,
                    OutputId = (uint)PenInput.Id.PositionY
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaX,
                    OutputId = (uint)PenInput.Id.DeltaX
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaY,
                    OutputId = (uint)PenInput.Id.DeltaY
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.TiltX,
                    OutputId = (uint)PenInput.Id.TiltX
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.TiltY,
                    OutputId = (uint)PenInput.Id.TiltY
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.Pressure,
                    OutputId = (uint)PenInput.Id.Pressure
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.Twist,
                    OutputId = (uint)PenInput.Id.Twist
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Tip,
                    OutputId = (uint)PenInput.Id.Tip
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Eraser,
                    OutputId = (uint)PenInput.Id.Eraser
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Barrel1,
                    OutputId = (uint)PenInput.Id.Barrel1
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Barrel2,
                    OutputId = (uint)PenInput.Id.Barrel2
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Barrel3,
                    OutputId = (uint)PenInput.Id.Barrel3
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Barrel4,
                    OutputId = (uint)PenInput.Id.Barrel4
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusX,
                    OutputId = (uint)PenInput.Id.RadiusX
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusY,
                    OutputId = (uint)PenInput.Id.RadiusY
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 935340987,
                    OutputFormat = 1453433373,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<PenEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<PenInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 16
                };

                // PenEvent -> PointerInput
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionX,
                    OutputId = (uint)PointerInput.Id.PositionX
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionY,
                    OutputId = (uint)PointerInput.Id.PositionY
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaX,
                    OutputId = (uint)PointerInput.Id.DeltaX
                };
                transforms[19] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaY,
                    OutputId = (uint)PointerInput.Id.DeltaY
                };
                transforms[20] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.Pressure,
                    OutputId = (uint)PointerInput.Id.Pressure
                };
                transforms[21] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusX,
                    OutputId = (uint)PointerInput.Id.RadiusX
                };
                transforms[22] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusY,
                    OutputId = (uint)PointerInput.Id.RadiusY
                };
                structMappings[1] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 935340987,
                    OutputFormat = 1030053651,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<PenEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<PointerInput>(),
                    TransformStartIndex = 16,
                    TransformCount = 7
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 2;
        private const int kTransformCount = 23;
    }

    public struct PenInput : IComponentData, IInputData
    {
        public Float2Input Position;
        public Float2Input Delta;
        public Float2Input Tilt;
        public Float2Input Radius;
        public HalfAxisInput Pressure;
        public FloatInput Twist;
        public FloatInput PositionX;
        public FloatInput PositionY;
        public FloatInput DeltaX;
        public FloatInput DeltaY;
        public FloatInput TiltX;
        public FloatInput TiltY;
        public FloatInput RadiusX;
        public FloatInput RadiusY;
        public ButtonInput Tip;
        public ButtonInput Press;
        public ButtonInput Eraser;
        public ButtonInput InRange;
        public ButtonInput Barrel1;
        public ButtonInput Barrel2;
        public ButtonInput Barrel3;
        public ButtonInput Barrel4;

        public enum Id : uint
        {
            Position = 0,
            Delta = 64,
            Tilt = 128,
            Radius = 192,
            Pressure = 256,
            Twist = 288,
            PositionX = 320,
            PositionY = 352,
            DeltaX = 384,
            DeltaY = 416,
            TiltX = 448,
            TiltY = 480,
            RadiusX = 512,
            RadiusY = 544,
            Tip = 576,
            Press = 584,
            Eraser = 592,
            InRange = 600,
            Barrel1 = 608,
            Barrel2 = 616,
            Barrel3 = 624,
            Barrel4 = 632,
        }
        public uint Format => 1453433373;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.PositionX,
                    InputId2 = (uint)Id.PositionY,
                    OutputId = (uint)Id.Position
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.DeltaX,
                    InputId2 = (uint)Id.DeltaY,
                    OutputId = (uint)Id.Delta
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.TiltX,
                    InputId2 = (uint)Id.TiltY,
                    OutputId = (uint)Id.Tilt
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.RadiusX,
                    InputId2 = (uint)Id.RadiusY,
                    OutputId = (uint)Id.Radius
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 1453433373,
                    OutputFormat = 1453433373,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<PenInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<PenInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 4
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 4;
    }
}
