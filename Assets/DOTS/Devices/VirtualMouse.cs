//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from VirtualMouse Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct VirtualMouseEvent : IInputData
    {
        public enum Id : uint
        {
            PositionX = 0,
            PositionY = 32,
            DeltaX = 64,
            DeltaY = 96,
            ScrollX = 128,
            ScrollY = 160,
            LeftButton = 192,
            RightButton = 193,
            MiddleButton = 194,
            ForwardButton = 195,
            BackButton = 196,
            Pressure = 256,
            RadiusX = 320,
            RadiusY = 352,
            PointerId = 384,
        }

        public float PositionX;
        public float PositionY;
        public float DeltaX;
        public float DeltaY;
        public float ScrollX;
        public float ScrollY;
        private long Padding0;
        public float Pressure;
        private int Padding1;
        public float RadiusX;
        public float RadiusY;
        private int Padding2;

        public unsafe bool LeftButton
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[24] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[24] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[24] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool RightButton
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[24] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[24] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[24] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool MiddleButton
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[24] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[24] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[24] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool ForwardButton
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[24] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[24] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[24] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool BackButton
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[24] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[24] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[24] &= ~(1 << 4) & 0xFF;
            }
        }

        public uint Format => 3663532479;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // VirtualMouseEvent -> VirtualMouseInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionX,
                    OutputId = (uint)VirtualMouseInput.Id.PositionX
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionY,
                    OutputId = (uint)VirtualMouseInput.Id.PositionY
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaX,
                    OutputId = (uint)VirtualMouseInput.Id.DeltaX
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaY,
                    OutputId = (uint)VirtualMouseInput.Id.DeltaY
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.ScrollX,
                    OutputId = (uint)VirtualMouseInput.Id.ScrollX
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.ScrollY,
                    OutputId = (uint)VirtualMouseInput.Id.ScrollY
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftButton,
                    OutputId = (uint)VirtualMouseInput.Id.LeftButton
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightButton,
                    OutputId = (uint)VirtualMouseInput.Id.RightButton
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.MiddleButton,
                    OutputId = (uint)VirtualMouseInput.Id.MiddleButton
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ForwardButton,
                    OutputId = (uint)VirtualMouseInput.Id.ForwardButton
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.BackButton,
                    OutputId = (uint)VirtualMouseInput.Id.BackButton
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.Pressure,
                    OutputId = (uint)VirtualMouseInput.Id.Pressure
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusX,
                    OutputId = (uint)VirtualMouseInput.Id.RadiusX
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusY,
                    OutputId = (uint)VirtualMouseInput.Id.RadiusY
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3663532479,
                    OutputFormat = 3141310489,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<VirtualMouseEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<VirtualMouseInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 14
                };

                // VirtualMouseEvent -> MouseInput
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionX,
                    OutputId = (uint)MouseInput.Id.PositionX
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionY,
                    OutputId = (uint)MouseInput.Id.PositionY
                };
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaX,
                    OutputId = (uint)MouseInput.Id.DeltaX
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaY,
                    OutputId = (uint)MouseInput.Id.DeltaY
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.ScrollX,
                    OutputId = (uint)MouseInput.Id.ScrollX
                };
                transforms[19] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.ScrollY,
                    OutputId = (uint)MouseInput.Id.ScrollY
                };
                transforms[20] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftButton,
                    OutputId = (uint)MouseInput.Id.LeftButton
                };
                transforms[21] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightButton,
                    OutputId = (uint)MouseInput.Id.RightButton
                };
                transforms[22] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.MiddleButton,
                    OutputId = (uint)MouseInput.Id.MiddleButton
                };
                transforms[23] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ForwardButton,
                    OutputId = (uint)MouseInput.Id.ForwardButton
                };
                transforms[24] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.BackButton,
                    OutputId = (uint)MouseInput.Id.BackButton
                };
                transforms[25] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.Pressure,
                    OutputId = (uint)MouseInput.Id.Pressure
                };
                transforms[26] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusX,
                    OutputId = (uint)MouseInput.Id.RadiusX
                };
                transforms[27] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusY,
                    OutputId = (uint)MouseInput.Id.RadiusY
                };
                structMappings[1] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3663532479,
                    OutputFormat = 2773929465,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<VirtualMouseEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<MouseInput>(),
                    TransformStartIndex = 14,
                    TransformCount = 14
                };

                // VirtualMouseEvent -> PointerInput
                transforms[28] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionX,
                    OutputId = (uint)PointerInput.Id.PositionX
                };
                transforms[29] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.PositionY,
                    OutputId = (uint)PointerInput.Id.PositionY
                };
                transforms[30] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaX,
                    OutputId = (uint)PointerInput.Id.DeltaX
                };
                transforms[31] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.DeltaY,
                    OutputId = (uint)PointerInput.Id.DeltaY
                };
                transforms[32] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.Pressure,
                    OutputId = (uint)PointerInput.Id.Pressure
                };
                transforms[33] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusX,
                    OutputId = (uint)PointerInput.Id.RadiusX
                };
                transforms[34] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RadiusY,
                    OutputId = (uint)PointerInput.Id.RadiusY
                };
                structMappings[2] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3663532479,
                    OutputFormat = 1030053651,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<VirtualMouseEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<PointerInput>(),
                    TransformStartIndex = 28,
                    TransformCount = 7
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 3;
        private const int kTransformCount = 35;
    }

    public struct VirtualMouseInput : IComponentData, IInputData
    {
        public Float2Input Position;
        public Float2Input Delta;
        public Float2Input Scroll;
        public Float2Input Radius;
        public HalfAxisInput Pressure;
        public FloatInput PositionX;
        public FloatInput PositionY;
        public FloatInput DeltaX;
        public FloatInput DeltaY;
        public FloatInput ScrollX;
        public FloatInput ScrollY;
        public FloatInput RadiusX;
        public FloatInput RadiusY;
        public ButtonInput Press;
        public ButtonInput LeftButton;
        public ButtonInput RightButton;
        public ButtonInput MiddleButton;
        public ButtonInput ForwardButton;
        public ButtonInput BackButton;

        public enum Id : uint
        {
            Position = 0,
            Delta = 64,
            Scroll = 128,
            Radius = 192,
            Pressure = 256,
            PositionX = 288,
            PositionY = 320,
            DeltaX = 352,
            DeltaY = 384,
            ScrollX = 416,
            ScrollY = 448,
            RadiusX = 480,
            RadiusY = 512,
            Press = 544,
            LeftButton = 552,
            RightButton = 560,
            MiddleButton = 568,
            ForwardButton = 576,
            BackButton = 584,
        }
        public uint Format => 3141310489;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.PositionX,
                    InputId2 = (uint)Id.PositionY,
                    OutputId = (uint)Id.Position
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.DeltaX,
                    InputId2 = (uint)Id.DeltaY,
                    OutputId = (uint)Id.Delta
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.ScrollX,
                    InputId2 = (uint)Id.ScrollY,
                    OutputId = (uint)Id.Scroll
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.RadiusX,
                    InputId2 = (uint)Id.RadiusY,
                    OutputId = (uint)Id.Radius
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 3141310489,
                    OutputFormat = 3141310489,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<VirtualMouseInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<VirtualMouseInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 4
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 4;
    }
}
