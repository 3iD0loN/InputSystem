//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from WebGLGamepad Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct WebGLGamepadEvent : IInputData
    {
        public enum Id : uint
        {
            LeftStickX = 0,
            LeftStickY = 32,
            RightStickX = 64,
            RightStickY = 96,
            ButtonSouth = 128,
            ButtonEast = 160,
            ButtonWest = 192,
            ButtonNorth = 224,
            LeftShoulder = 256,
            RightShoulder = 288,
            LeftTrigger = 320,
            RightTrigger = 352,
            Select = 384,
            Start = 416,
            LeftStickPress = 448,
            RightStickPress = 480,
            DpadUp = 512,
            DpadDown = 544,
            DpadLeft = 576,
            DpadRight = 608,
        }

        public float LeftStickX;
        public float LeftStickY;
        public float RightStickX;
        public float RightStickY;
        public float ButtonSouth;
        public float ButtonEast;
        public float ButtonWest;
        public float ButtonNorth;
        public float LeftShoulder;
        public float RightShoulder;
        public float LeftTrigger;
        public float RightTrigger;
        public float Select;
        public float Start;
        public float LeftStickPress;
        public float RightStickPress;
        public float DpadUp;
        public float DpadDown;
        public float DpadLeft;
        public float DpadRight;

        public uint Format => 1985529494;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // WebGLGamepadEvent -> WebGLGamepadInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)WebGLGamepadInput.Id.LeftStickX
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)WebGLGamepadInput.Id.LeftStickY
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)WebGLGamepadInput.Id.RightStickX
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)WebGLGamepadInput.Id.RightStickY
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 1985529494,
                    OutputFormat = 389631792,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<WebGLGamepadEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<WebGLGamepadInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 4
                };

                // WebGLGamepadEvent -> GamepadInput
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)GamepadInput.Id.LeftStickX
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)GamepadInput.Id.LeftStickY
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)GamepadInput.Id.RightStickX
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.FloatToAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)GamepadInput.Id.RightStickY
                };
                structMappings[1] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 1985529494,
                    OutputFormat = 623278190,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<WebGLGamepadEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<GamepadInput>(),
                    TransformStartIndex = 4,
                    TransformCount = 4
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 2;
        private const int kTransformCount = 8;
    }

    public struct WebGLGamepadInput : IComponentData, IInputData
    {
        public Float2Input LeftStick;
        public Float2Input RightStick;
        public Float2Input Dpad;
        public HalfAxisInput ButtonSouth;
        public HalfAxisInput ButtonEast;
        public HalfAxisInput ButtonWest;
        public HalfAxisInput ButtonNorth;
        public HalfAxisInput LeftShoulder;
        public HalfAxisInput RightShoulder;
        public HalfAxisInput LeftTrigger;
        public HalfAxisInput RightTrigger;
        public HalfAxisInput Select;
        public HalfAxisInput Start;
        public HalfAxisInput LeftStickPress;
        public HalfAxisInput RightStickPress;
        public HalfAxisInput LeftStickUp;
        public AxisInput LeftStickX;
        public AxisInput LeftStickY;
        public HalfAxisInput LeftStickDown;
        public HalfAxisInput LeftStickLeft;
        public HalfAxisInput LeftStickRight;
        public HalfAxisInput RightStickUp;
        public AxisInput RightStickX;
        public AxisInput RightStickY;
        public HalfAxisInput RightStickDown;
        public HalfAxisInput RightStickLeft;
        public HalfAxisInput RightStickRight;
        public FloatInput DpadX;
        public FloatInput DpadY;
        public HalfAxisInput DpadUp;
        public HalfAxisInput DpadDown;
        public HalfAxisInput DpadLeft;
        public HalfAxisInput DpadRight;
        public ButtonInput ButtonButtonSouth;
        public ButtonInput ButtonButtonEast;
        public ButtonInput ButtonButtonWest;
        public ButtonInput ButtonButtonNorth;
        public ButtonInput ButtonLeftShoulder;
        public ButtonInput ButtonRightShoulder;
        public ButtonInput ButtonLeftTrigger;
        public ButtonInput ButtonRightTrigger;
        public ButtonInput ButtonSelect;
        public ButtonInput ButtonStart;
        public ButtonInput ButtonLeftStickPress;
        public ButtonInput ButtonRightStickPress;
        public ButtonInput ButtonLeftStickUp;
        public ButtonInput ButtonLeftStickDown;
        public ButtonInput ButtonLeftStickLeft;
        public ButtonInput ButtonLeftStickRight;
        public ButtonInput ButtonRightStickUp;
        public ButtonInput ButtonRightStickDown;
        public ButtonInput ButtonRightStickLeft;
        public ButtonInput ButtonRightStickRight;
        public ButtonInput ButtonDpadUp;
        public ButtonInput ButtonDpadDown;
        public ButtonInput ButtonDpadLeft;
        public ButtonInput ButtonDpadRight;

        public enum Id : uint
        {
            LeftStick = 0,
            RightStick = 64,
            Dpad = 128,
            ButtonSouth = 192,
            ButtonEast = 224,
            ButtonWest = 256,
            ButtonNorth = 288,
            LeftShoulder = 320,
            RightShoulder = 352,
            LeftTrigger = 384,
            RightTrigger = 416,
            Select = 448,
            Start = 480,
            LeftStickPress = 512,
            RightStickPress = 544,
            LeftStickUp = 576,
            LeftStickX = 608,
            LeftStickY = 640,
            LeftStickDown = 672,
            LeftStickLeft = 704,
            LeftStickRight = 736,
            RightStickUp = 768,
            RightStickX = 800,
            RightStickY = 832,
            RightStickDown = 864,
            RightStickLeft = 896,
            RightStickRight = 928,
            DpadX = 960,
            DpadY = 992,
            DpadUp = 1024,
            DpadDown = 1056,
            DpadLeft = 1088,
            DpadRight = 1120,
            ButtonButtonSouth = 1152,
            ButtonButtonEast = 1160,
            ButtonButtonWest = 1168,
            ButtonButtonNorth = 1176,
            ButtonLeftShoulder = 1184,
            ButtonRightShoulder = 1192,
            ButtonLeftTrigger = 1200,
            ButtonRightTrigger = 1208,
            ButtonSelect = 1216,
            ButtonStart = 1224,
            ButtonLeftStickPress = 1232,
            ButtonRightStickPress = 1240,
            ButtonLeftStickUp = 1248,
            ButtonLeftStickDown = 1256,
            ButtonLeftStickLeft = 1264,
            ButtonLeftStickRight = 1272,
            ButtonRightStickUp = 1280,
            ButtonRightStickDown = 1288,
            ButtonRightStickLeft = 1296,
            ButtonRightStickRight = 1304,
            ButtonDpadUp = 1312,
            ButtonDpadDown = 1320,
            ButtonDpadLeft = 1328,
            ButtonDpadRight = 1336,
        }
        public uint Format => 389631792;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.LeftStickX,
                    InputId2 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStick
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.RightStickX,
                    InputId2 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStick
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Combination.TwoAxesToOneFloat2),
                    InputId1 = (uint)Id.DpadX,
                    InputId2 = (uint)Id.DpadY,
                    OutputId = (uint)Id.Dpad
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStickUp
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickUp,
                    OutputId = (uint)Id.ButtonLeftStickUp
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickY,
                    OutputId = (uint)Id.LeftStickDown
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickDown,
                    OutputId = (uint)Id.ButtonLeftStickDown
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)Id.LeftStickLeft
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickLeft,
                    OutputId = (uint)Id.ButtonLeftStickLeft
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.LeftStickX,
                    OutputId = (uint)Id.LeftStickRight
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.LeftStickRight,
                    OutputId = (uint)Id.ButtonLeftStickRight
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStickUp
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickUp,
                    OutputId = (uint)Id.ButtonRightStickUp
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickY,
                    OutputId = (uint)Id.RightStickDown
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickDown,
                    OutputId = (uint)Id.ButtonRightStickDown
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.NegativeAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)Id.RightStickLeft
                };
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickLeft,
                    OutputId = (uint)Id.ButtonRightStickLeft
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.PositiveAxisToHalfAxis),
                    InputId1 = (uint)Id.RightStickX,
                    OutputId = (uint)Id.RightStickRight
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.HalfAxisToButton),
                    InputId1 = (uint)Id.RightStickRight,
                    OutputId = (uint)Id.ButtonRightStickRight
                };

                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 389631792,
                    OutputFormat = 389631792,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<WebGLGamepadInput>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<WebGLGamepadInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 19
                };
                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 19;
    }
}
