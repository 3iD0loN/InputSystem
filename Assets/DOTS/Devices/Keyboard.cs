//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DOTS Input Device Code Generator
//     version 1.1.0
//     from Keyboard Layout
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Input;

#pragma warning disable CS0169

namespace Unity.Input
{
    public struct KeyboardEvent : IInputData
    {
        public enum Id : uint
        {
            Space = 1,
            Enter = 2,
            Tab = 3,
            Backquote = 4,
            Quote = 5,
            Semicolon = 6,
            Comma = 7,
            Period = 8,
            Slash = 9,
            Backslash = 10,
            LeftBracket = 11,
            RightBracket = 12,
            Minus = 13,
            Equals = 14,
            A = 15,
            B = 16,
            C = 17,
            D = 18,
            E = 19,
            F = 20,
            G = 21,
            H = 22,
            I = 23,
            J = 24,
            K = 25,
            L = 26,
            M = 27,
            N = 28,
            O = 29,
            P = 30,
            Q = 31,
            R = 32,
            S = 33,
            T = 34,
            U = 35,
            V = 36,
            W = 37,
            X = 38,
            Y = 39,
            Z = 40,
            _1 = 41,
            _2 = 42,
            _3 = 43,
            _4 = 44,
            _5 = 45,
            _6 = 46,
            _7 = 47,
            _8 = 48,
            _9 = 49,
            _0 = 50,
            LeftShift = 51,
            RightShift = 52,
            LeftAlt = 53,
            RightAlt = 54,
            LeftCtrl = 55,
            RightCtrl = 56,
            LeftMeta = 57,
            RightMeta = 58,
            ContextMenu = 59,
            Escape = 60,
            LeftArrow = 61,
            RightArrow = 62,
            UpArrow = 63,
            DownArrow = 64,
            Backspace = 65,
            PageDown = 66,
            PageUp = 67,
            Home = 68,
            End = 69,
            Insert = 70,
            Delete = 71,
            CapsLock = 72,
            NumLock = 73,
            PrintScreen = 74,
            ScrollLock = 75,
            Pause = 76,
            NumpadEnter = 77,
            NumpadDivide = 78,
            NumpadMultiply = 79,
            NumpadPlus = 80,
            NumpadMinus = 81,
            NumpadPeriod = 82,
            NumpadEquals = 83,
            Numpad0 = 84,
            Numpad1 = 85,
            Numpad2 = 86,
            Numpad3 = 87,
            Numpad4 = 88,
            Numpad5 = 89,
            Numpad6 = 90,
            Numpad7 = 91,
            Numpad8 = 92,
            Numpad9 = 93,
            F1 = 94,
            F2 = 95,
            F3 = 96,
            F4 = 97,
            F5 = 98,
            F6 = 99,
            F7 = 100,
            F8 = 101,
            F9 = 102,
            F10 = 103,
            F11 = 104,
            F12 = 105,
            OEM1 = 106,
            OEM2 = 107,
            OEM3 = 108,
            OEM4 = 109,
            OEM5 = 110,
        }

        private long Padding0;
        private long Padding1;

        public unsafe bool Space
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool Enter
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool Tab
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Backquote
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool Quote
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool Semicolon
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool Comma
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[0] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[0] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[0] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool Period
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool Slash
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool Backslash
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool LeftBracket
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool RightBracket
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool Minus
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool Equals
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool A
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[1] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[1] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[1] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool B
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool C
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool D
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool E
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool F
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool G
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool H
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool I
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[2] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[2] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[2] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool J
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool K
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool L
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool M
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool N
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool O
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool P
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool Q
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[3] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[3] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[3] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool R
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool S
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool T
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool U
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool V
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool W
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool X
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool Y
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[4] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[4] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[4] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool Z
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool _1
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool _2
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool _3
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool _4
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool _5
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool _6
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool _7
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[5] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[5] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[5] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool _8
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool _9
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool _0
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool LeftShift
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool RightShift
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool LeftAlt
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool RightAlt
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool LeftCtrl
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[6] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[6] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[6] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool RightCtrl
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool LeftMeta
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool RightMeta
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool ContextMenu
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Escape
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool LeftArrow
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool RightArrow
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool UpArrow
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[7] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[7] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[7] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool DownArrow
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool Backspace
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool PageDown
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool PageUp
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Home
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool End
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool Insert
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool Delete
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[8] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[8] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[8] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool CapsLock
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool NumLock
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool PrintScreen
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool ScrollLock
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Pause
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool NumpadEnter
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool NumpadDivide
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool NumpadMultiply
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[9] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[9] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[9] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool NumpadPlus
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool NumpadMinus
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool NumpadPeriod
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool NumpadEquals
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Numpad0
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool Numpad1
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool Numpad2
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool Numpad3
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[10] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[10] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[10] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool Numpad4
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool Numpad5
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool Numpad6
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool Numpad7
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool Numpad8
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool Numpad9
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool F1
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool F2
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[11] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[11] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[11] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool F3
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool F4
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool F5
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool F6
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool F7
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool F8
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool F9
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 6) & 0xFF;
            }
        }

        public unsafe bool F10
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[12] & ((1 << 7) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[12] |= (1 << 7) & 0xFF;
                else
                    ((byte*)thisPtr)[12] &= ~(1 << 7) & 0xFF;
            }
        }

        public unsafe bool F11
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[13] & ((1 << 0) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[13] |= (1 << 0) & 0xFF;
                else
                    ((byte*)thisPtr)[13] &= ~(1 << 0) & 0xFF;
            }
        }

        public unsafe bool F12
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[13] & ((1 << 1) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[13] |= (1 << 1) & 0xFF;
                else
                    ((byte*)thisPtr)[13] &= ~(1 << 1) & 0xFF;
            }
        }

        public unsafe bool OEM1
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[13] & ((1 << 2) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[13] |= (1 << 2) & 0xFF;
                else
                    ((byte*)thisPtr)[13] &= ~(1 << 2) & 0xFF;
            }
        }

        public unsafe bool OEM2
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[13] & ((1 << 3) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[13] |= (1 << 3) & 0xFF;
                else
                    ((byte*)thisPtr)[13] &= ~(1 << 3) & 0xFF;
            }
        }

        public unsafe bool OEM3
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[13] & ((1 << 4) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[13] |= (1 << 4) & 0xFF;
                else
                    ((byte*)thisPtr)[13] &= ~(1 << 4) & 0xFF;
            }
        }

        public unsafe bool OEM4
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[13] & ((1 << 5) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[13] |= (1 << 5) & 0xFF;
                else
                    ((byte*)thisPtr)[13] &= ~(1 << 5) & 0xFF;
            }
        }

        public unsafe bool OEM5
        {
            get
            {
                fixed(void* thisPtr = &this)
                return (((byte*)thisPtr)[13] & ((1 << 6) & 0xFF)) != 0;
            }
            set
            {
                fixed(void* thisPtr = &this)
                if (value)
                    ((byte*)thisPtr)[13] |= (1 << 6) & 0xFF;
                else
                    ((byte*)thisPtr)[13] &= ~(1 << 6) & 0xFF;
            }
        }

        public uint Format => 538017695;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent);
                var transforms = new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent);


                // KeyboardEvent -> KeyboardInput
                transforms[0] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Space,
                    OutputId = (uint)KeyboardInput.Id.Space
                };
                transforms[1] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Enter,
                    OutputId = (uint)KeyboardInput.Id.Enter
                };
                transforms[2] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Tab,
                    OutputId = (uint)KeyboardInput.Id.Tab
                };
                transforms[3] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Backquote,
                    OutputId = (uint)KeyboardInput.Id.Backquote
                };
                transforms[4] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Quote,
                    OutputId = (uint)KeyboardInput.Id.Quote
                };
                transforms[5] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Semicolon,
                    OutputId = (uint)KeyboardInput.Id.Semicolon
                };
                transforms[6] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Comma,
                    OutputId = (uint)KeyboardInput.Id.Comma
                };
                transforms[7] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Period,
                    OutputId = (uint)KeyboardInput.Id.Period
                };
                transforms[8] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Slash,
                    OutputId = (uint)KeyboardInput.Id.Slash
                };
                transforms[9] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Backslash,
                    OutputId = (uint)KeyboardInput.Id.Backslash
                };
                transforms[10] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftBracket,
                    OutputId = (uint)KeyboardInput.Id.LeftBracket
                };
                transforms[11] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightBracket,
                    OutputId = (uint)KeyboardInput.Id.RightBracket
                };
                transforms[12] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Minus,
                    OutputId = (uint)KeyboardInput.Id.Minus
                };
                transforms[13] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Equals,
                    OutputId = (uint)KeyboardInput.Id.Equals
                };
                transforms[14] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.A,
                    OutputId = (uint)KeyboardInput.Id.A
                };
                transforms[15] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.B,
                    OutputId = (uint)KeyboardInput.Id.B
                };
                transforms[16] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.C,
                    OutputId = (uint)KeyboardInput.Id.C
                };
                transforms[17] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.D,
                    OutputId = (uint)KeyboardInput.Id.D
                };
                transforms[18] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.E,
                    OutputId = (uint)KeyboardInput.Id.E
                };
                transforms[19] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F,
                    OutputId = (uint)KeyboardInput.Id.F
                };
                transforms[20] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.G,
                    OutputId = (uint)KeyboardInput.Id.G
                };
                transforms[21] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.H,
                    OutputId = (uint)KeyboardInput.Id.H
                };
                transforms[22] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.I,
                    OutputId = (uint)KeyboardInput.Id.I
                };
                transforms[23] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.J,
                    OutputId = (uint)KeyboardInput.Id.J
                };
                transforms[24] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.K,
                    OutputId = (uint)KeyboardInput.Id.K
                };
                transforms[25] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.L,
                    OutputId = (uint)KeyboardInput.Id.L
                };
                transforms[26] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.M,
                    OutputId = (uint)KeyboardInput.Id.M
                };
                transforms[27] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.N,
                    OutputId = (uint)KeyboardInput.Id.N
                };
                transforms[28] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.O,
                    OutputId = (uint)KeyboardInput.Id.O
                };
                transforms[29] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.P,
                    OutputId = (uint)KeyboardInput.Id.P
                };
                transforms[30] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Q,
                    OutputId = (uint)KeyboardInput.Id.Q
                };
                transforms[31] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.R,
                    OutputId = (uint)KeyboardInput.Id.R
                };
                transforms[32] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.S,
                    OutputId = (uint)KeyboardInput.Id.S
                };
                transforms[33] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.T,
                    OutputId = (uint)KeyboardInput.Id.T
                };
                transforms[34] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.U,
                    OutputId = (uint)KeyboardInput.Id.U
                };
                transforms[35] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.V,
                    OutputId = (uint)KeyboardInput.Id.V
                };
                transforms[36] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.W,
                    OutputId = (uint)KeyboardInput.Id.W
                };
                transforms[37] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.X,
                    OutputId = (uint)KeyboardInput.Id.X
                };
                transforms[38] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Y,
                    OutputId = (uint)KeyboardInput.Id.Y
                };
                transforms[39] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Z,
                    OutputId = (uint)KeyboardInput.Id.Z
                };
                transforms[40] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._1,
                    OutputId = (uint)KeyboardInput.Id._1
                };
                transforms[41] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._2,
                    OutputId = (uint)KeyboardInput.Id._2
                };
                transforms[42] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._3,
                    OutputId = (uint)KeyboardInput.Id._3
                };
                transforms[43] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._4,
                    OutputId = (uint)KeyboardInput.Id._4
                };
                transforms[44] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._5,
                    OutputId = (uint)KeyboardInput.Id._5
                };
                transforms[45] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._6,
                    OutputId = (uint)KeyboardInput.Id._6
                };
                transforms[46] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._7,
                    OutputId = (uint)KeyboardInput.Id._7
                };
                transforms[47] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._8,
                    OutputId = (uint)KeyboardInput.Id._8
                };
                transforms[48] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._9,
                    OutputId = (uint)KeyboardInput.Id._9
                };
                transforms[49] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id._0,
                    OutputId = (uint)KeyboardInput.Id._0
                };
                transforms[50] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftShift,
                    OutputId = (uint)KeyboardInput.Id.LeftShift
                };
                transforms[51] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightShift,
                    OutputId = (uint)KeyboardInput.Id.RightShift
                };
                transforms[52] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftAlt,
                    OutputId = (uint)KeyboardInput.Id.LeftAlt
                };
                transforms[53] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightAlt,
                    OutputId = (uint)KeyboardInput.Id.RightAlt
                };
                transforms[54] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftCtrl,
                    OutputId = (uint)KeyboardInput.Id.LeftCtrl
                };
                transforms[55] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightCtrl,
                    OutputId = (uint)KeyboardInput.Id.RightCtrl
                };
                transforms[56] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftMeta,
                    OutputId = (uint)KeyboardInput.Id.LeftMeta
                };
                transforms[57] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightMeta,
                    OutputId = (uint)KeyboardInput.Id.RightMeta
                };
                transforms[58] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ContextMenu,
                    OutputId = (uint)KeyboardInput.Id.ContextMenu
                };
                transforms[59] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Escape,
                    OutputId = (uint)KeyboardInput.Id.Escape
                };
                transforms[60] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.LeftArrow,
                    OutputId = (uint)KeyboardInput.Id.LeftArrow
                };
                transforms[61] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.RightArrow,
                    OutputId = (uint)KeyboardInput.Id.RightArrow
                };
                transforms[62] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.UpArrow,
                    OutputId = (uint)KeyboardInput.Id.UpArrow
                };
                transforms[63] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.DownArrow,
                    OutputId = (uint)KeyboardInput.Id.DownArrow
                };
                transforms[64] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Backspace,
                    OutputId = (uint)KeyboardInput.Id.Backspace
                };
                transforms[65] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.PageDown,
                    OutputId = (uint)KeyboardInput.Id.PageDown
                };
                transforms[66] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.PageUp,
                    OutputId = (uint)KeyboardInput.Id.PageUp
                };
                transforms[67] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Home,
                    OutputId = (uint)KeyboardInput.Id.Home
                };
                transforms[68] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.End,
                    OutputId = (uint)KeyboardInput.Id.End
                };
                transforms[69] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Insert,
                    OutputId = (uint)KeyboardInput.Id.Insert
                };
                transforms[70] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Delete,
                    OutputId = (uint)KeyboardInput.Id.Delete
                };
                transforms[71] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.CapsLock,
                    OutputId = (uint)KeyboardInput.Id.CapsLock
                };
                transforms[72] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumLock,
                    OutputId = (uint)KeyboardInput.Id.NumLock
                };
                transforms[73] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.PrintScreen,
                    OutputId = (uint)KeyboardInput.Id.PrintScreen
                };
                transforms[74] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.ScrollLock,
                    OutputId = (uint)KeyboardInput.Id.ScrollLock
                };
                transforms[75] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Pause,
                    OutputId = (uint)KeyboardInput.Id.Pause
                };
                transforms[76] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumpadEnter,
                    OutputId = (uint)KeyboardInput.Id.NumpadEnter
                };
                transforms[77] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumpadDivide,
                    OutputId = (uint)KeyboardInput.Id.NumpadDivide
                };
                transforms[78] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumpadMultiply,
                    OutputId = (uint)KeyboardInput.Id.NumpadMultiply
                };
                transforms[79] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumpadPlus,
                    OutputId = (uint)KeyboardInput.Id.NumpadPlus
                };
                transforms[80] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumpadMinus,
                    OutputId = (uint)KeyboardInput.Id.NumpadMinus
                };
                transforms[81] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumpadPeriod,
                    OutputId = (uint)KeyboardInput.Id.NumpadPeriod
                };
                transforms[82] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.NumpadEquals,
                    OutputId = (uint)KeyboardInput.Id.NumpadEquals
                };
                transforms[83] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad0,
                    OutputId = (uint)KeyboardInput.Id.Numpad0
                };
                transforms[84] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad1,
                    OutputId = (uint)KeyboardInput.Id.Numpad1
                };
                transforms[85] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad2,
                    OutputId = (uint)KeyboardInput.Id.Numpad2
                };
                transforms[86] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad3,
                    OutputId = (uint)KeyboardInput.Id.Numpad3
                };
                transforms[87] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad4,
                    OutputId = (uint)KeyboardInput.Id.Numpad4
                };
                transforms[88] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad5,
                    OutputId = (uint)KeyboardInput.Id.Numpad5
                };
                transforms[89] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad6,
                    OutputId = (uint)KeyboardInput.Id.Numpad6
                };
                transforms[90] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad7,
                    OutputId = (uint)KeyboardInput.Id.Numpad7
                };
                transforms[91] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad8,
                    OutputId = (uint)KeyboardInput.Id.Numpad8
                };
                transforms[92] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.Numpad9,
                    OutputId = (uint)KeyboardInput.Id.Numpad9
                };
                transforms[93] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F1,
                    OutputId = (uint)KeyboardInput.Id.F1
                };
                transforms[94] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F2,
                    OutputId = (uint)KeyboardInput.Id.F2
                };
                transforms[95] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F3,
                    OutputId = (uint)KeyboardInput.Id.F3
                };
                transforms[96] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F4,
                    OutputId = (uint)KeyboardInput.Id.F4
                };
                transforms[97] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F5,
                    OutputId = (uint)KeyboardInput.Id.F5
                };
                transforms[98] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F6,
                    OutputId = (uint)KeyboardInput.Id.F6
                };
                transforms[99] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F7,
                    OutputId = (uint)KeyboardInput.Id.F7
                };
                transforms[100] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F8,
                    OutputId = (uint)KeyboardInput.Id.F8
                };
                transforms[101] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F9,
                    OutputId = (uint)KeyboardInput.Id.F9
                };
                transforms[102] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F10,
                    OutputId = (uint)KeyboardInput.Id.F10
                };
                transforms[103] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F11,
                    OutputId = (uint)KeyboardInput.Id.F11
                };
                transforms[104] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.F12,
                    OutputId = (uint)KeyboardInput.Id.F12
                };
                transforms[105] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.OEM1,
                    OutputId = (uint)KeyboardInput.Id.OEM1
                };
                transforms[106] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.OEM2,
                    OutputId = (uint)KeyboardInput.Id.OEM2
                };
                transforms[107] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.OEM3,
                    OutputId = (uint)KeyboardInput.Id.OEM3
                };
                transforms[108] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.OEM4,
                    OutputId = (uint)KeyboardInput.Id.OEM4
                };
                transforms[109] = new DOTSInput.InputTransform
                {
                    Operation = DOTSInput.ToTransformOperation(DOTSInput.Conversion.BitToButton),
                    InputId1 = (uint)Id.OEM5,
                    OutputId = (uint)KeyboardInput.Id.OEM5
                };
                structMappings[0] = new DOTSInput.InputStructMapping
                {
                    InputFormat = 538017695,
                    OutputFormat = 1097922105,
                    InputSizeInBytes = (uint)UnsafeUtility.SizeOf<KeyboardEvent>(),
                    OutputSizeInBytes = (uint)UnsafeUtility.SizeOf<KeyboardInput>(),
                    TransformStartIndex = 0,
                    TransformCount = 110
                };

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 1;
        private const int kTransformCount = 110;
    }

    public struct KeyboardInput : IComponentData, IInputData
    {
        public HalfAxisInput AnyKey;
        public HalfAxisInput Shift;
        public HalfAxisInput Alt;
        public HalfAxisInput Ctrl;
        public ButtonInput ButtonAnyKey;
        public ButtonInput Escape;
        public ButtonInput Space;
        public ButtonInput Enter;
        public ButtonInput Tab;
        public ButtonInput Backquote;
        public ButtonInput Quote;
        public ButtonInput Semicolon;
        public ButtonInput Comma;
        public ButtonInput Period;
        public ButtonInput Slash;
        public ButtonInput Backslash;
        public ButtonInput LeftBracket;
        public ButtonInput RightBracket;
        public ButtonInput Minus;
        public ButtonInput Equals;
        public ButtonInput UpArrow;
        public ButtonInput DownArrow;
        public ButtonInput LeftArrow;
        public ButtonInput RightArrow;
        public ButtonInput A;
        public ButtonInput B;
        public ButtonInput C;
        public ButtonInput D;
        public ButtonInput E;
        public ButtonInput F;
        public ButtonInput G;
        public ButtonInput H;
        public ButtonInput I;
        public ButtonInput J;
        public ButtonInput K;
        public ButtonInput L;
        public ButtonInput M;
        public ButtonInput N;
        public ButtonInput O;
        public ButtonInput P;
        public ButtonInput Q;
        public ButtonInput R;
        public ButtonInput S;
        public ButtonInput T;
        public ButtonInput U;
        public ButtonInput V;
        public ButtonInput W;
        public ButtonInput X;
        public ButtonInput Y;
        public ButtonInput Z;
        public ButtonInput _1;
        public ButtonInput _2;
        public ButtonInput _3;
        public ButtonInput _4;
        public ButtonInput _5;
        public ButtonInput _6;
        public ButtonInput _7;
        public ButtonInput _8;
        public ButtonInput _9;
        public ButtonInput _0;
        public ButtonInput LeftShift;
        public ButtonInput RightShift;
        public ButtonInput ButtonShift;
        public ButtonInput LeftAlt;
        public ButtonInput RightAlt;
        public ButtonInput ButtonAlt;
        public ButtonInput LeftCtrl;
        public ButtonInput RightCtrl;
        public ButtonInput ButtonCtrl;
        public ButtonInput LeftMeta;
        public ButtonInput RightMeta;
        public ButtonInput ContextMenu;
        public ButtonInput Backspace;
        public ButtonInput PageDown;
        public ButtonInput PageUp;
        public ButtonInput Home;
        public ButtonInput End;
        public ButtonInput Insert;
        public ButtonInput Delete;
        public ButtonInput CapsLock;
        public ButtonInput NumLock;
        public ButtonInput PrintScreen;
        public ButtonInput ScrollLock;
        public ButtonInput Pause;
        public ButtonInput NumpadEnter;
        public ButtonInput NumpadDivide;
        public ButtonInput NumpadMultiply;
        public ButtonInput NumpadPlus;
        public ButtonInput NumpadMinus;
        public ButtonInput NumpadPeriod;
        public ButtonInput NumpadEquals;
        public ButtonInput Numpad1;
        public ButtonInput Numpad2;
        public ButtonInput Numpad3;
        public ButtonInput Numpad4;
        public ButtonInput Numpad5;
        public ButtonInput Numpad6;
        public ButtonInput Numpad7;
        public ButtonInput Numpad8;
        public ButtonInput Numpad9;
        public ButtonInput Numpad0;
        public ButtonInput F1;
        public ButtonInput F2;
        public ButtonInput F3;
        public ButtonInput F4;
        public ButtonInput F5;
        public ButtonInput F6;
        public ButtonInput F7;
        public ButtonInput F8;
        public ButtonInput F9;
        public ButtonInput F10;
        public ButtonInput F11;
        public ButtonInput F12;
        public ButtonInput OEM1;
        public ButtonInput OEM2;
        public ButtonInput OEM3;
        public ButtonInput OEM4;
        public ButtonInput OEM5;
        public ButtonInput IMESelected;

        public enum Id : uint
        {
            AnyKey = 0,
            Shift = 32,
            Alt = 64,
            Ctrl = 96,
            ButtonAnyKey = 128,
            Escape = 136,
            Space = 144,
            Enter = 152,
            Tab = 160,
            Backquote = 168,
            Quote = 176,
            Semicolon = 184,
            Comma = 192,
            Period = 200,
            Slash = 208,
            Backslash = 216,
            LeftBracket = 224,
            RightBracket = 232,
            Minus = 240,
            Equals = 248,
            UpArrow = 256,
            DownArrow = 264,
            LeftArrow = 272,
            RightArrow = 280,
            A = 288,
            B = 296,
            C = 304,
            D = 312,
            E = 320,
            F = 328,
            G = 336,
            H = 344,
            I = 352,
            J = 360,
            K = 368,
            L = 376,
            M = 384,
            N = 392,
            O = 400,
            P = 408,
            Q = 416,
            R = 424,
            S = 432,
            T = 440,
            U = 448,
            V = 456,
            W = 464,
            X = 472,
            Y = 480,
            Z = 488,
            _1 = 496,
            _2 = 504,
            _3 = 512,
            _4 = 520,
            _5 = 528,
            _6 = 536,
            _7 = 544,
            _8 = 552,
            _9 = 560,
            _0 = 568,
            LeftShift = 576,
            RightShift = 584,
            ButtonShift = 592,
            LeftAlt = 600,
            RightAlt = 608,
            ButtonAlt = 616,
            LeftCtrl = 624,
            RightCtrl = 632,
            ButtonCtrl = 640,
            LeftMeta = 648,
            RightMeta = 656,
            ContextMenu = 664,
            Backspace = 672,
            PageDown = 680,
            PageUp = 688,
            Home = 696,
            End = 704,
            Insert = 712,
            Delete = 720,
            CapsLock = 728,
            NumLock = 736,
            PrintScreen = 744,
            ScrollLock = 752,
            Pause = 760,
            NumpadEnter = 768,
            NumpadDivide = 776,
            NumpadMultiply = 784,
            NumpadPlus = 792,
            NumpadMinus = 800,
            NumpadPeriod = 808,
            NumpadEquals = 816,
            Numpad1 = 824,
            Numpad2 = 832,
            Numpad3 = 840,
            Numpad4 = 848,
            Numpad5 = 856,
            Numpad6 = 864,
            Numpad7 = 872,
            Numpad8 = 880,
            Numpad9 = 888,
            Numpad0 = 896,
            F1 = 904,
            F2 = 912,
            F3 = 920,
            F4 = 928,
            F5 = 936,
            F6 = 944,
            F7 = 952,
            F8 = 960,
            F9 = 968,
            F10 = 976,
            F11 = 984,
            F12 = 992,
            OEM1 = 1000,
            OEM2 = 1008,
            OEM3 = 1016,
            OEM4 = 1024,
            OEM5 = 1032,
            IMESelected = 1040,
        }
        public uint Format => 1097922105;

        public DOTSInput.InputPipeline InputPipelineParts
        {
            get
            {
                var structMappings = kStructMappingCount > 0 ? new NativeArray<DOTSInput.InputStructMapping>(kStructMappingCount, Allocator.Persistent) : default;
                var transforms = kTransformCount > 0 ? new NativeArray<DOTSInput.InputTransform>(kTransformCount, Allocator.Persistent) : default;

                return new DOTSInput.InputPipeline
                {
                    StructMappings = structMappings,
                    Transforms = transforms,
                };
            }
        }

        private const int kStructMappingCount = 0;
        private const int kTransformCount = 0;
    }
}
